name: Predict, Deploy & Auto-Heal Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - "*"

permissions:
  id-token: write
  contents: read

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCOUNT_ID:     ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO:           ${{ secrets.ECR_REPO }}
  MODEL_ECR_REPO:     ${{ secrets.MODEL_ECR_REPO }}   # e.g. "sklearn-inference"
  IMAGE_TAG:          "1.0-1-cpu-py3"                # valid public.ecr.aws tag
  MODEL_S3_PATH:      ${{ secrets.MODEL_S3_PATH }}   # e.g. "s3://ai-devops-models-prod/model.tar.gz"

jobs:
  build-deploy-heal:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ env.AWS_DEFAULT_REGION }}

      - name: Show caller identity
        run: aws sts get-caller-identity

      - name: Install AWS CLI v2
        run: |
          curl -sSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Install kubectl
        run: |
          K8S_VERSION=$(curl -sL https://dl.k8s.io/release/stable.txt)
          curl -sL "https://dl.k8s.io/release/${K8S_VERSION}/bin/linux/amd64/kubectl" -o kubectl
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig \
            --region $AWS_DEFAULT_REGION \
            --name   ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Verify Kubernetes access
        run: kubectl get nodes

      - name: Build & push app Docker image to ECR
        run: |
          docker build -t $ECR_REPO:${{ github.sha }} app
          docker tag \
            $ECR_REPO:${{ github.sha }} \
            $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPO:${{ github.sha }}
          aws ecr get-login-password --region $AWS_DEFAULT_REGION \
            | docker login --username AWS --password-stdin \
              $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
          docker push \
            $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPO:${{ github.sha }}

      - name: Mirror SageMaker sklearn image into ECR
        run: |
          REPO_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$MODEL_ECR_REPO"
          TAG="$IMAGE_TAG"

          # 1) pull from public ECR
          docker pull public.ecr.aws/sagemaker/sklearn-inference:$TAG

          # 2) tag into your private ECR
          docker tag \
            public.ecr.aws/sagemaker/sklearn-inference:$TAG \
            $REPO_URI:$TAG

          # 3) login & push
          aws ecr get-login-password --region $AWS_DEFAULT_REGION \
            | docker login --username AWS --password-stdin \
              $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
          docker push $REPO_URI:$TAG

          # 4) expose for Terraform / SageMaker
          echo "MODEL_IMAGE_URI=$REPO_URI:$TAG" >> $GITHUB_ENV

      - name: Upload model artifact to S3
        run: aws s3 cp ml_model/models/model.tar.gz $MODEL_S3_PATH

      - name: Deploy app to EKS
        run: |
          kubectl set image deployment/your-app-deployment \
            app-container=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPO:${{ github.sha }}
          kubectl rollout status deployment/your-app-deployment --timeout=120s

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install --upgrade pip
            pip install -r requirements.txt
          fi

      - name: Predict failure probability
        id: predict
        run: |
          echo '{"cpu_usage":85.0,"memory_usage":70.0,"error_count":1,"test_passed":true,"build_time":90}' > metrics.json
          prob=$(python ml_model/predict_failure.py --input-json metrics.json)
          echo "fail_prob=$prob" >> $GITHUB_ENV
          echo "Predicted fail_prob: $prob"

      - name: Auto-heal if needed
        if: ${{ env.fail_prob && env.fail_prob >= '0.75' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          python pipeline/scripts/smart_auto_heal.py \
            --deployment your-app-deployment \
            --namespace default \
            --replicas 3

          curl -X POST -H "Content-Type: application/json" \
            --data "{\"text\":\"Auto-heal triggered: scaled to 3 replicas (fail_prob=${{ env.fail_prob }}).\"}" \
            $SLACK_WEBHOOK_URL
