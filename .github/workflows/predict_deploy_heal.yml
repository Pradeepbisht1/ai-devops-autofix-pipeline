name: Predict, Deploy & Auto-Heal Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION:     ${{ secrets.AWS_DEFAULT_REGION }}
  ECR_REPO:       ${{ secrets.ECR_REPO }}

jobs:
  build-deploy-heal:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Install kubectl
        run: |
          K8S_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)
          curl -L "https://dl.k8s.io/release/${K8S_VERSION}/bin/linux/amd64/kubectl" -o kubectl
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region:            ${{ env.AWS_REGION }}
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure kubectl for EKS
        uses: aws-actions/amazon-eks-update-kubeconfig@v1
        with:
          region:       ${{ env.AWS_REGION }}
          cluster-name: ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Build & Push Docker Image to ECR
        run: |
          docker build -t $ECR_REPO:${{ github.sha }} app
          docker tag $ECR_REPO:${{ github.sha }} \
            $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:${{ github.sha }}
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:${{ github.sha }}

      - name: Deploy to EKS
        run: |
          kubectl set image deployment/your-app-deployment \
            app-container=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:${{ github.sha }}
          kubectl rollout status deployment/your-app-deployment --timeout=120s

      - name: Setup Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install --upgrade pip
            pip install -r requirements.txt
          fi

      - name: Predict Failure Probability
        id: predict
        run: |
          echo '{"cpu_usage":85.0,"memory_usage":70.0,"error_count":1,"test_passed":true,"build_time":90}' > metrics.json
          prob=$(python ml_model/predict_failure.py --input-json metrics.json)
          echo "fail_prob=$prob" >> $GITHUB_OUTPUT

      - name: Auto-Heal if Needed
        if: ${{ steps.predict.outputs.fail_prob >= '0.75' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          python pipeline/scripts/smart_auto_heal.py \
            --deployment your-app-deployment \
            --namespace default \
            --replicas 3
          curl -X POST -H 'Content-Type: application/json' \
            --data "{\"text\":\"Auto-heal triggered: scaled to 3 replicas.\"}" \
            $SLACK_WEBHOOK_URL
